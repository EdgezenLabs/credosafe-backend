name: 🚀 Deploy CredoSafe Backend to EC2

on:
  push:
    branches:
      - release
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 🧾 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Copy Code to EC2 via SCP
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "."
          target: "/home/${{ secrets.EC2_USER }}/deploy_tmp"
          strip_components: 0
          overwrite: true
          rm: true

      - name: 🧠 Deploy & Restart on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            echo "🚀 Starting deployment..."
            rsync -av --delete --exclude 'venv' --exclude '.env' --exclude '.git' /home/ec2-user/deploy_tmp/ ${{ secrets.REMOTE_DIR }}/

            cd ${{ secrets.REMOTE_DIR }}

            # Ensure Python virtual environment
            if [ ! -d "venv" ]; then
              echo "🔧 Creating virtual environment..."
              python3 -m venv venv
            fi

            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "💾 Writing environment variables..."
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env

            echo "🧬 Running Alembic migrations (if available)..."
            if [ -f "alembic.ini" ]; then
              alembic upgrade head || true
            fi

            echo "🔁 Restarting FastAPI service..."
            sudo systemctl daemon-reload || true
            sudo systemctl restart credosafe
            sudo systemctl status credosafe --no-pager || true

            echo "🧹 Cleaning up temp files..."
            rm -rf /home/ec2-user/deploy_tmp

            echo "✅ Deployment complete!"
